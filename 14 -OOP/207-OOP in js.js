/*
    âœ… Classical OOP: Classes
        ðŸŸ¢ Objects (instances) are instantiated from a class, which functions like a blueprint
        ðŸŸ¢ Behavior (methods) is copied from class to all instances

    âœ… OOP in JS: Prototypes
        ðŸŸ¢ Objects are linked to a prototype object
        ðŸŸ¢ Prototypal inheritance: The prototype contains methods (behavior) that are accessible to all objects linked to that prototype
        ðŸŸ¢ Behavior is delegated to the linked prototype object
        
    âœ… 3 Ways of Implementing Prototypal Inheritance in JS
        ðŸŸ¢ Constructor function
            ðŸŸ¡ Technique to create objects from a function
            ðŸŸ¡ This is how built-in objects like Arrays, Maps and Sets are actually implemented
        ðŸŸ¢ ES6 Classes
            ðŸŸ¡ Modern alternative to constructor function syntax
            ðŸŸ¡ "Syntactic sugar": behind the scenes, ES6 classes work exactly like constructor functions
            ðŸŸ¡ ES6 classes do NOT behave like classes in "classical OOP"
        ðŸŸ¢ Object.create()
            ðŸŸ¡ The easiest and most straightforward way of linking an object to a prototype object
*/
